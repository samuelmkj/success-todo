[{distillery,[{config_providers,[]}]},
 {sasl,[{errlog_type,error},{sasl_error_logger,false}]},
 {api_interactor,[{version,<<"2.1.17">>}]},
 {xema,[{loader,'Elixir.Autoflow.Common.Schema.Http.Loader'}]},
 {kafka_ex,[{disable_default_worker,true}]},
 {tds,[{text_encoder,'Elixir.Tds.Encoding'}]},
 {license,
     [{store_startup,
          {'Elixir.Autoflow.Store.Process.ChangeHandler',startup}}]},
 {store,
     [{flow_migration,'Elixir.Autoflow.Flow.Migration'},
      {resource_adapter,'Elixir.Autoflow.StoreMnesia.Adapter'},
      {store_migration,'Elixir.Autoflow.Store.Migration'}]},
 {flow,
     [{flow_references,
          [#{<<"module">> => 'Elixir.Autoflow.Flow.Utils',
             <<"role">> => execution,<<"type">> => <<"data">>}]},
      {store_references,
          [#{<<"module">> => 'Elixir.Autoflow.Store.Table.Data',
             <<"role">> => store,<<"type">> => <<"table">>},
           #{<<"module">> => 'Elixir.Autoflow.Store.Table.FileContent',
             <<"role">> => store,<<"type">> => <<"file">>},
           #{<<"module">> => 'Elixir.Autoflow.Store.Table.Variable',
             <<"role">> => store,<<"type">> => <<"variable">>},
           #{<<"module">> => 'Elixir.Autoflow.Store.Table.Schema.Http.Tokens',
             <<"role">> => store,<<"type">> => <<"oauth">>}]}]},
 {store_mariadb,[{ecto_repos,['Elixir.Autoflow.StoreMariaDB.Repo']}]},
 {common,
     [{version,<<"2.1.17">>},
      {domain,<<"apiautoflow">>},
      {console_subdomain,<<"console">>},
      {api_subdomain,<<"api">>},
      {deployment_role,all},
      {deployment_mode,<<"SOLO">>},
      {common_startup,
          {'Elixir.Autoflow.Common.Application',cluster_connected}},
      {flow_startup,{'Elixir.Autoflow.Flow.Application',cluster_connected}},
      {flow_tables,['Elixir.Autoflow.Flow.Cache']},
      {license_startup,
          {'Elixir.Autoflow.License.Application',cluster_connected}},
      {service_startup,
          {'Elixir.Autoflow.Service.Application',cluster_connected}},
      {service_tables,
          ['Elixir.Autoflow.Service.Status',
           'Elixir.Autoflow.Service.Connection']},
      {store_startup,{'Elixir.Autoflow.Store.Application',cluster_connected}},
      {mnesia_startup,
          {'Elixir.Autoflow.StoreMnesia.Application',cluster_connected}}]},
 {phoenix,[{json_library,'Elixir.Jason'}]},
 {logger,
     [{console,
          [{format,<<"$time $metadata[$level] $message\n">>},
           {metadata,[request_id]}]},
      {level,info}]},
 {web,
     [{common_routes,
          [{get,
               [<<"/logs">>,'Elixir.FunctionController',
                #{module => 'Elixir.Autoflow.Common.LogReader'}]},
           {post,
               [<<"/utils/abnf/decode">>,'Elixir.FunctionController',
                #{function => decode,
                  module => 'Elixir.Autoflow.Common.ABNF'}]},
           {post,
               [<<"/utils/abnf/encode">>,'Elixir.FunctionController',
                #{function => encode,
                  module => 'Elixir.Autoflow.Common.ABNF'}]}]},
      {core_routes,
          [{delete,
               [<<"/logs/:pit">>,'Elixir.FunctionController',
                #{function => delete,
                  module => 'Elixir.Autoflow.Common.Logs'}]},
           {post,
               [<<"/logs">>,'Elixir.FunctionController',
                #{function => post,module => 'Elixir.Autoflow.Common.Logs'}]},
           {post,
               [<<"/process/:id/start">>,'Elixir.FunctionController',
                #{function => start,
                  module => 'Elixir.Autoflow.Core.Procedure.Process'}]},
           {post,
               [<<"/process/:id/stop">>,'Elixir.FunctionController',
                #{function => stop,
                  module => 'Elixir.Autoflow.Core.Procedure.Process'}]},
           {post,
               [<<"/process/:id/restart">>,'Elixir.FunctionController',
                #{function => restart,
                  module => 'Elixir.Autoflow.Core.Procedure.Process'}]},
           {get,
               [<<"/add-on-list">>,'Elixir.FunctionController',
                #{function => get,include_args => false,
                  module => 'Elixir.Autoflow.Core.AddOns'}]},
           {post,
               [<<"/add-on-install">>,'Elixir.FunctionController',
                #{function => install,
                  module => 'Elixir.Autoflow.Core.AddOns'}]},
           {post,
               [<<"/add-on-versions">>,'Elixir.FunctionController',
                #{function => get_versions,
                  module => 'Elixir.Autoflow.Core.AddOns'}]},
           {post,
               [<<"/data-form/initialize">>,'Elixir.FunctionController',
                #{function => initialize,
                  module => 'Elixir.Autoflow.Common.JsonSchemaForm'}]},
           {post,
               [<<"/schema-form">>,'Elixir.FunctionController',
                #{module => 'Elixir.Autoflow.Common.JsonSchemaForm'}]},
           {get,
               [<<"/product">>,'Elixir.FunctionController',
                #{function => details,include_args => false,
                  module => 'Elixir.Autoflow.Common.Product',
                  skipAuthentication => true}]},
           {get,
               [<<"/download/logs">>,'Elixir.FunctionController',
                #{module => 'Elixir.Autoflow.Core.Downloads'}]},
           {get,
               [<<"/download/usage-info">>,'Elixir.FunctionController',
                #{module => 'Elixir.Autoflow.Core.Downloads'}]},
           {post,
               [<<"/inbound/:inbound_id/schema/swagger">>,
                'Elixir.FunctionController',
                #{function => import,
                  module => 'Elixir.Autoflow.Core.Schema.Http.Swagger'}]},
           {post,
               [<<"/swagger">>,'Elixir.FunctionController',
                #{function => import,
                  module => 'Elixir.Autoflow.Core.Schema.Http.Swagger'}]},
           {post,
               [<<"/http-operation-validation">>,'Elixir.FunctionController',
                #{module => 'Elixir.Autoflow.Core.Schema.Http.Api'}]},
           {post,
               [<<"/oauth-token-check">>,'Elixir.FunctionController',
                #{function => check_token,
                  module => 'Elixir.Autoflow.Core.Process.OauthProxy'}]}]},
      {flow_routes,
          [{delete,
               [<<"/mock/flow/:flow_id/:test_id">>,
                'Elixir.FunctionController',
                #{function => clear,module => 'Elixir.Autoflow.Flow'}]},
           {get,
               [<<"/mock/flow/:flow_id/:test_id">>,
                'Elixir.FunctionController',
                #{function => run,module => 'Elixir.Autoflow.Flow'}]}]},
      {license_routes,
          [{get,
               [<<"/license">>,'Elixir.FunctionController',
                #{function => get,include_args => false,
                  module => 'Elixir.Autoflow.License.Manager'}]},
           {post,
               [<<"/license">>,'Elixir.FunctionController',
                #{function => set,include_args => false,
                  module => 'Elixir.Autoflow.License.Manager'}]},
           {post,
               [<<"/validate-license">>,'Elixir.FunctionController',
                #{function => validate,include_args => false,
                  module => 'Elixir.Autoflow.License.Manager'}]}]},
      {service_routes,
          [{post,
               [<<"/service/database/:id">>,'Elixir.FunctionController',
                #{function => database,
                  module => 'Elixir.Autoflow.Service.Database'}]},
           {get,
               [<<"/process-status">>,'Elixir.FunctionController',
                #{function => get,include_args => false,
                  module => 'Elixir.Autoflow.Service.Status'}]}]},
      {store_routes,
          [{rest,
               [<<"/system-environment">>,
                #{module => 'Elixir.Autoflow.Common.SystemEnvironment'}]},
           {rest,
               [<<"/system-environment/:id">>,
                #{module => 'Elixir.Autoflow.Common.SystemEnvironment'}]},
           {get,
               [<<"/config/download">>,'Elixir.FunctionController',
                #{function => export,
                  module => 'Elixir.Autoflow.Store.Procedure.Table'}]},
           {post,
               [<<"/config/upload">>,'Elixir.FunctionController',
                #{function => import,
                  module => 'Elixir.Autoflow.Store.Procedure.Table'}]},
           {post,
               [<<"/config/clear">>,'Elixir.FunctionController',
                #{function => clear,
                  module => 'Elixir.Autoflow.Store.Procedure.Table'}]},
           {get,
               [<<"/data-group/:id">>,'Elixir.FunctionController',
                #{function => get,
                  module => 'Elixir.Autoflow.Store.Table.Data'}]},
           {post,
               [<<"/resource">>,'Elixir.FunctionController',
                #{function => create,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {get,
               [<<"/resource/:id">>,'Elixir.FunctionController',
                #{function => read,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {put,
               [<<"/resource/:id">>,'Elixir.FunctionController',
                #{function => update,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {delete,
               [<<"/resource/:id">>,'Elixir.FunctionController',
                #{function => delete,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {get,
               [<<"/resource-info">>,'Elixir.FunctionController',
                #{function => read_info,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {get,
               [<<"/resource-info/:id">>,'Elixir.FunctionController',
                #{function => read_info,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {put,
               [<<"/resource-info/:id">>,'Elixir.FunctionController',
                #{function => update_info,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {get,
               [<<"/user">>,'Elixir.FunctionController',
                #{function => read_users,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {post,
               [<<"/user">>,'Elixir.FunctionController',
                #{function => create_user,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {delete,
               [<<"/user/:id">>,'Elixir.FunctionController',
                #{function => delete_user,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {post,
               [<<"/file/:file_id/file">>,'Elixir.FunctionController',
                #{function => upload,
                  module => 'Elixir.Autoflow.Store.Table.FileContent'}]},
           {delete,
               [<<"/file/:file_id/file">>,'Elixir.FunctionController',
                #{function => remove,
                  module => 'Elixir.Autoflow.Store.Table.FileContent'}]},
           {get,
               [<<"/file/:file_id/download">>,'Elixir.FunctionController',
                #{function => download,
                  module => 'Elixir.Autoflow.Store.Table.FileContent'}]},
           {get,
               [<<"/oauth">>,'Elixir.FunctionController',
                #{function => api,
                  module =>
                      'Elixir.Autoflow.Store.Table.Schema.Http.Oauth'}]}]},
      {'Elixir.Web.Endpoint',
          [{render_errors,
               [{view,'Elixir.Web.ErrorView'},
                {accepts,[<<"html">>,<<"json">>]},
                {layout,false}]},
           {pubsub_server,'Elixir.Web.PubSub'},
           {check_origin,false},
           {live_view,[{signing_salt,<<"13pifzBu">>}]},
           {http,[{port,{system,<<"AUTOFLOW_UI_PORT">>}}]},
           {server,true},
           {root,<<".">>},
           {cache_static_manifest,<<"priv/static/cache_manifest.json">>},
           {secret_key_base,
               <<"MJhfV3hvX4loylyPVKpUf58SEcT1fpT8BshbMqSV2g9y9sd4uc1oE1UPAoM0pNDIn/smhsG6mNh85eLa45tL9A==">>}]},
      {web_routes,
          [{get,
               [<<"/first-user">>,'Elixir.FunctionController',
                #{function => is_first_user,
                  module => 'Elixir.Web.Authentication',
                  skipAuthentication => true}]},
           {post,
               [<<"/signup">>,'Elixir.FunctionController',
                #{function => signup,module => 'Elixir.Web.Authentication',
                  skipAuthentication => true}]},
           {get,
               [<<"/login">>,'Elixir.FunctionController',
                #{function => login,module => 'Elixir.Web.Authentication',
                  skipAuthentication => true}]},
           {get,
               [<<"/logout">>,'Elixir.FunctionController',
                #{function => logout,module => 'Elixir.Web.Authentication',
                  skipAuthentication => true}]},
           {get,
               [<<"/connection-tokens">>,'Elixir.FunctionController',
                #{function => connection_tokens,
                  module => 'Elixir.Web.Authentication'}]},
           {post,
               [<<"/verify">>,'Elixir.FunctionController',
                #{function => verify,module => 'Elixir.Web.Authentication',
                  skipAuthentication => true}]}]}]}].
