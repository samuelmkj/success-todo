[{conv_case,[]},
 {uuid,[]},
 {jason,[]},
 {ecto_sql,[{postgres_map_type,<<"jsonb">>}]},
 {logger,
     [{discard_threshold_periodic_check,30000},
      {compile_time_application,nil},
      {compile_time_purge_matching,[]},
      {truncate,8096},
      {discard_threshold,500},
      {translator_inspect_opts,[]},
      {console,
          [{format,<<"$time $metadata[$level] $message\n">>},
           {metadata,[request_id]}]},
      {compile_time_purge_level,debug},
      {handle_sasl_reports,false},
      {translators,[{'Elixir.Logger.Translator',translate}]},
      {discard_threshold_for_error_logger,500},
      {backends,[console]},
      {sync_threshold,20},
      {handle_otp_reports,true},
      {level,info},
      {utc_log,false}]},
 {crypto,[{rand_cache_size,896},{fips_mode,false}]},
 {cowlib,[]},
 {parse_trans,[]},
 {libcluster,[]},
 {kafka_ex,[{disable_default_worker,true}]},
 {store,
     [{resource_adapter,'Elixir.Autoflow.StoreMnesia.Adapter'},
      {flow_migration,'Elixir.Autoflow.Flow.Migration'},
      {store_migration,'Elixir.Autoflow.Store.Migration'}]},
 {logger_file_backend,[]},
 {stdlib,[]},
 {aws,[]},
 {ssl_verify_fun,[]},
 {kernel,
     [{logger_sasl_compatible,false},
      {logger,
          [{handler,default,logger_std_h,
               #{config => #{type => standard_io},
                 formatter =>
                     {logger_formatter,
                         #{legacy_header => true,single_line => false}}}}]},
      {logger_level,notice}]},
 {phoenix_live_view,[]},
 {mbcs_rs,[]},
 {xmerl,[]},
 {cowboy,[]},
 {tortoise,[]},
 {myxql,[{json_library,'Elixir.Jason'}]},
 {yamerl,[{node_mods,[]}]},
 {kayrock,[]},
 {telemetry_poller,[]},
 {mix,[{colors,[]}]},
 {hackney,
     [{maxt,1},
      {restart,permanent},
      {max_connections,50},
      {maxr,10},
      {shutdown,10000},
      {timeout,150000}]},
 {tds_encoding,[]},
 {ecto,[]},
 {common,
     [{license_startup,
          {'Elixir.Autoflow.License.Application',cluster_connected}},
      {domain,<<"apiautoflow">>},
      {flow_startup,{'Elixir.Autoflow.Flow.Application',cluster_connected}},
      {flow_tables,['Elixir.Autoflow.Flow.Cache']},
      {service_tables,
          ['Elixir.Autoflow.Service.Status',
           'Elixir.Autoflow.Service.Connection']},
      {api_subdomain,<<"api">>},
      {service_startup,
          {'Elixir.Autoflow.Service.Application',cluster_connected}},
      {version,<<"2.1.17">>},
      {common_startup,
          {'Elixir.Autoflow.Common.Application',cluster_connected}},
      {deployment_mode,<<"SOLO">>},
      {console_subdomain,<<"console">>},
      {deployment_role,all},
      {mnesia_startup,
          {'Elixir.Autoflow.StoreMnesia.Application',cluster_connected}},
      {store_startup,
          {'Elixir.Autoflow.Store.Application',cluster_connected}}]},
 {eex,[]},
 {telemetry,[]},
 {mimerl,[]},
 {credentials_obfuscation,[{enabled,true}]},
 {compiler,[]},
 {web,
     [{flow_routes,
          [{delete,
               [<<"/mock/flow/:flow_id/:test_id">>,
                'Elixir.FunctionController',
                #{function => clear,module => 'Elixir.Autoflow.Flow'}]},
           {get,
               [<<"/mock/flow/:flow_id/:test_id">>,
                'Elixir.FunctionController',
                #{function => run,module => 'Elixir.Autoflow.Flow'}]}]},
      {license_routes,
          [{get,
               [<<"/license">>,'Elixir.FunctionController',
                #{function => get,include_args => false,
                  module => 'Elixir.Autoflow.License.Manager'}]},
           {post,
               [<<"/license">>,'Elixir.FunctionController',
                #{function => set,include_args => false,
                  module => 'Elixir.Autoflow.License.Manager'}]},
           {post,
               [<<"/validate-license">>,'Elixir.FunctionController',
                #{function => validate,include_args => false,
                  module => 'Elixir.Autoflow.License.Manager'}]}]},
      {core_routes,
          [{delete,
               [<<"/logs/:pit">>,'Elixir.FunctionController',
                #{function => delete,
                  module => 'Elixir.Autoflow.Common.Logs'}]},
           {post,
               [<<"/logs">>,'Elixir.FunctionController',
                #{function => post,module => 'Elixir.Autoflow.Common.Logs'}]},
           {post,
               [<<"/process/:id/start">>,'Elixir.FunctionController',
                #{function => start,
                  module => 'Elixir.Autoflow.Core.Procedure.Process'}]},
           {post,
               [<<"/process/:id/stop">>,'Elixir.FunctionController',
                #{function => stop,
                  module => 'Elixir.Autoflow.Core.Procedure.Process'}]},
           {post,
               [<<"/process/:id/restart">>,'Elixir.FunctionController',
                #{function => restart,
                  module => 'Elixir.Autoflow.Core.Procedure.Process'}]},
           {get,
               [<<"/add-on-list">>,'Elixir.FunctionController',
                #{function => get,include_args => false,
                  module => 'Elixir.Autoflow.Core.AddOns'}]},
           {post,
               [<<"/add-on-install">>,'Elixir.FunctionController',
                #{function => install,
                  module => 'Elixir.Autoflow.Core.AddOns'}]},
           {post,
               [<<"/add-on-versions">>,'Elixir.FunctionController',
                #{function => get_versions,
                  module => 'Elixir.Autoflow.Core.AddOns'}]},
           {post,
               [<<"/data-form/initialize">>,'Elixir.FunctionController',
                #{function => initialize,
                  module => 'Elixir.Autoflow.Common.JsonSchemaForm'}]},
           {post,
               [<<"/schema-form">>,'Elixir.FunctionController',
                #{module => 'Elixir.Autoflow.Common.JsonSchemaForm'}]},
           {get,
               [<<"/product">>,'Elixir.FunctionController',
                #{function => details,include_args => false,
                  module => 'Elixir.Autoflow.Common.Product',
                  skipAuthentication => true}]},
           {get,
               [<<"/download/logs">>,'Elixir.FunctionController',
                #{module => 'Elixir.Autoflow.Core.Downloads'}]},
           {get,
               [<<"/download/usage-info">>,'Elixir.FunctionController',
                #{module => 'Elixir.Autoflow.Core.Downloads'}]},
           {post,
               [<<"/inbound/:inbound_id/schema/swagger">>,
                'Elixir.FunctionController',
                #{function => import,
                  module => 'Elixir.Autoflow.Core.Schema.Http.Swagger'}]},
           {post,
               [<<"/swagger">>,'Elixir.FunctionController',
                #{function => import,
                  module => 'Elixir.Autoflow.Core.Schema.Http.Swagger'}]},
           {post,
               [<<"/http-operation-validation">>,'Elixir.FunctionController',
                #{module => 'Elixir.Autoflow.Core.Schema.Http.Api'}]},
           {post,
               [<<"/oauth-token-check">>,'Elixir.FunctionController',
                #{function => check_token,
                  module => 'Elixir.Autoflow.Core.Process.OauthProxy'}]}]},
      {'Elixir.Web.Endpoint',
          [{render_errors,
               [{view,'Elixir.Web.ErrorView'},
                {accepts,[<<"html">>,<<"json">>]},
                {layout,false}]},
           {pubsub_server,'Elixir.Web.PubSub'},
           {check_origin,false},
           {live_view,[{signing_salt,<<"13pifzBu">>}]},
           {http,[{port,{system,<<"AUTOFLOW_UI_PORT">>}}]},
           {server,true},
           {root,<<".">>},
           {cache_static_manifest,<<"priv/static/cache_manifest.json">>},
           {secret_key_base,
               <<"MJhfV3hvX4loylyPVKpUf58SEcT1fpT8BshbMqSV2g9y9sd4uc1oE1UPAoM0pNDIn/smhsG6mNh85eLa45tL9A==">>}]},
      {web_routes,
          [{get,
               [<<"/first-user">>,'Elixir.FunctionController',
                #{function => is_first_user,
                  module => 'Elixir.Web.Authentication',
                  skipAuthentication => true}]},
           {post,
               [<<"/signup">>,'Elixir.FunctionController',
                #{function => signup,module => 'Elixir.Web.Authentication',
                  skipAuthentication => true}]},
           {get,
               [<<"/login">>,'Elixir.FunctionController',
                #{function => login,module => 'Elixir.Web.Authentication',
                  skipAuthentication => true}]},
           {get,
               [<<"/logout">>,'Elixir.FunctionController',
                #{function => logout,module => 'Elixir.Web.Authentication',
                  skipAuthentication => true}]},
           {get,
               [<<"/connection-tokens">>,'Elixir.FunctionController',
                #{function => connection_tokens,
                  module => 'Elixir.Web.Authentication'}]},
           {post,
               [<<"/verify">>,'Elixir.FunctionController',
                #{function => verify,module => 'Elixir.Web.Authentication',
                  skipAuthentication => true}]}]},
      {common_routes,
          [{get,
               [<<"/logs">>,'Elixir.FunctionController',
                #{module => 'Elixir.Autoflow.Common.LogReader'}]},
           {post,
               [<<"/utils/abnf/decode">>,'Elixir.FunctionController',
                #{function => decode,
                  module => 'Elixir.Autoflow.Common.ABNF'}]},
           {post,
               [<<"/utils/abnf/encode">>,'Elixir.FunctionController',
                #{function => encode,
                  module => 'Elixir.Autoflow.Common.ABNF'}]}]},
      {store_routes,
          [{rest,
               [<<"/system-environment">>,
                #{module => 'Elixir.Autoflow.Common.SystemEnvironment'}]},
           {rest,
               [<<"/system-environment/:id">>,
                #{module => 'Elixir.Autoflow.Common.SystemEnvironment'}]},
           {get,
               [<<"/config/download">>,'Elixir.FunctionController',
                #{function => export,
                  module => 'Elixir.Autoflow.Store.Procedure.Table'}]},
           {post,
               [<<"/config/upload">>,'Elixir.FunctionController',
                #{function => import,
                  module => 'Elixir.Autoflow.Store.Procedure.Table'}]},
           {post,
               [<<"/config/clear">>,'Elixir.FunctionController',
                #{function => clear,
                  module => 'Elixir.Autoflow.Store.Procedure.Table'}]},
           {get,
               [<<"/data-group/:id">>,'Elixir.FunctionController',
                #{function => get,
                  module => 'Elixir.Autoflow.Store.Table.Data'}]},
           {post,
               [<<"/resource">>,'Elixir.FunctionController',
                #{function => create,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {get,
               [<<"/resource/:id">>,'Elixir.FunctionController',
                #{function => read,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {put,
               [<<"/resource/:id">>,'Elixir.FunctionController',
                #{function => update,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {delete,
               [<<"/resource/:id">>,'Elixir.FunctionController',
                #{function => delete,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {get,
               [<<"/resource-info">>,'Elixir.FunctionController',
                #{function => read_info,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {get,
               [<<"/resource-info/:id">>,'Elixir.FunctionController',
                #{function => read_info,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {put,
               [<<"/resource-info/:id">>,'Elixir.FunctionController',
                #{function => update_info,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {get,
               [<<"/user">>,'Elixir.FunctionController',
                #{function => read_users,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {post,
               [<<"/user">>,'Elixir.FunctionController',
                #{function => create_user,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {delete,
               [<<"/user/:id">>,'Elixir.FunctionController',
                #{function => delete_user,
                  module => 'Elixir.Autoflow.Store.Resource'}]},
           {post,
               [<<"/file/:file_id/file">>,'Elixir.FunctionController',
                #{function => upload,
                  module => 'Elixir.Autoflow.Store.Table.FileContent'}]},
           {delete,
               [<<"/file/:file_id/file">>,'Elixir.FunctionController',
                #{function => remove,
                  module => 'Elixir.Autoflow.Store.Table.FileContent'}]},
           {get,
               [<<"/file/:file_id/download">>,'Elixir.FunctionController',
                #{function => download,
                  module => 'Elixir.Autoflow.Store.Table.FileContent'}]},
           {get,
               [<<"/oauth">>,'Elixir.FunctionController',
                #{function => api,
                  module =>
                      'Elixir.Autoflow.Store.Table.Schema.Http.Oauth'}]}]},
      {service_routes,
          [{post,
               [<<"/service/database/:id">>,'Elixir.FunctionController',
                #{function => database,
                  module => 'Elixir.Autoflow.Service.Database'}]},
           {get,
               [<<"/process-status">>,'Elixir.FunctionController',
                #{function => get,include_args => false,
                  module => 'Elixir.Autoflow.Service.Status'}]}]}]},
 {jamdb_oracle,[]},
 {tools,[{file_util_search_methods,[{[],[]},{"ebin","esrc"},{"ebin","src"}]}]},
 {lager,
     [{colors,
          [{debug,"\e[0;38m"},
           {info,"\e[1;37m"},
           {notice,"\e[1;36m"},
           {warning,"\e[1;33m"},
           {error,"\e[1;31m"},
           {critical,"\e[1;35m"},
           {alert,"\e[1;44m"},
           {emergency,"\e[1;41m"}]},
      {crash_log_size,10485760},
      {crash_log_rotator,lager_rotator_default},
      {crash_log_count,5},
      {async_threshold_window,5},
      {error_logger_redirect,true},
      {async_threshold,20},
      {error_logger_hwm,50},
      {crash_log_msg_size,65536},
      {colored,false},
      {crash_log_date,"$D0"},
      {crash_log,"log/crash.log"}]},
 {recon,[]},
 {public_key,[]},
 {db_connection,[]},
 {castore,[]},
 {poolboy,[]},
 {phoenix,
     [{stacktrace_depth,nil},
      {format_encoders,[]},
      {gzippable_exts,
          [<<".js">>,<<".css">>,<<".txt">>,<<".text">>,<<".html">>,
           <<".json">>,<<".svg">>,<<".eot">>,<<".ttf">>]},
      {logger,true},
      {json_library,'Elixir.Jason'},
      {serve_endpoints,false},
      {filter_parameters,[<<"password">>]},
      {trim_on_html_eex_engine,true},
      {template_engines,[]}]},
 {plug_crypto,[]},
 {gettext,[{default_locale,<<"en">>}]},
 {rabbit_common,[]},
 {store_mnesia,[]},
 {distillery,[{config_providers,[]}]},
 {amqp_client,
     [{prefer_ipv6,false},{writer_gc_threshold,1000000000},{ssl_options,[]}]},
 {redix,[]},
 {httpoison,[]},
 {elixir,
     [{check_endianness,true},
      {ansi_enabled,false},
      {time_zone_database,'Elixir.Calendar.UTCOnlyTimeZoneDatabase'}]},
 {csv,[]},
 {ink,[]},
 {service,[]},
 {mnesia,[]},
 {elixir_radius,[]},
 {gen_smtp,[]},
 {rustler,[]},
 {flow,
     [{store_references,
          [#{<<"module">> => 'Elixir.Autoflow.Store.Table.Data',
             <<"role">> => store,<<"type">> => <<"table">>},
           #{<<"module">> => 'Elixir.Autoflow.Store.Table.FileContent',
             <<"role">> => store,<<"type">> => <<"file">>},
           #{<<"module">> => 'Elixir.Autoflow.Store.Table.Variable',
             <<"role">> => store,<<"type">> => <<"variable">>},
           #{<<"module">> => 'Elixir.Autoflow.Store.Table.Schema.Http.Tokens',
             <<"role">> => store,<<"type">> => <<"oauth">>}]},
      {flow_references,
          [#{<<"module">> => 'Elixir.Autoflow.Flow.Utils',
             <<"role">> => execution,<<"type">> => <<"data">>}]}]},
 {mutex,[]},
 {json_xema,[]},
 {phoenix_live_dashboard,[]},
 {postgrex,[{json_library,'Elixir.Jason'},{type_server_reap_after,180000}]},
 {phoenix_pubsub,[]},
 {amqp,[]},
 {inets,[]},
 {mime,[{types,#{}}]},
 {xema,[{loader,'Elixir.Autoflow.Common.Schema.Http.Loader'}]},
 {idna,[]},
 {runtime_tools,[]},
 {phoenix_html,[]},
 {sasl,[{errlog_type,error},{sasl_error_logger,false}]},
 {gen_state_machine,[]},
 {artificery,[]},
 {license,
     [{store_startup,
          {'Elixir.Autoflow.Store.Process.ChangeHandler',startup}}]},
 {syntax_tools,[]},
 {iex,
     [{default_prompt,<<"%prefix(%counter)>">>},
      {history_size,20},
      {alive_prompt,<<"%prefix(%node)%counter>">>},
      {inspect,[{pretty,true}]},
      {colors,[]}]},
 {crc32cer,[]},
 {jsx,[]},
 {goldrush,[]},
 {ex_aws,[]},
 {core,[]},
 {varint,[]},
 {telemetry_metrics,[]},
 {asn1,[]},
 {ssl,[]},
 {connection,[]},
 {ranch,[]},
 {certifi,[]},
 {unicode_util_compat,[]},
 {decimal,[]},
 {plug_cowboy,[]},
 {metrics,[]},
 {tds,[{json_library,'Elixir.Jason'},{text_encoder,'Elixir.Tds.Encoding'}]},
 {parallel_stream,[]},
 {plug,[{validate_header_keys_during_test,true}]}].
